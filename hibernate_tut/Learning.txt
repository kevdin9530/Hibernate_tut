 ////////////////////HIBERNATE/////////////////////
 Hibernate is a framework for persisting/saving Java object in database
 The benefit of hibernate is:
 - handles all of low-level SQL
 - Minimize the JDBC code need to develop 
 - it also provides Object-to-Relational Mapping (ORM)
 basically the developer need to define mapping between java class and database table
 
 - To save object with hibernate, we use a special hibernate object, hibernate will store data in the database.
 This allow u to skip writing the SQL code for inserting the data in database.
 - To retrieve a given object, just give an id to hibernate, it will query the table according to the given id.
 - To retrieve all java object instead of 1, basically u need to fetch a query from hibernate object from the
 given java class object, then use query.list() to fetch for full dataobject.
 - Hibernate CRUD Apps: Create/Read/Update/Delete objects
 
 Relationship between Hibernate n JDBC:
 - Hibernate use JDBC to communicate with the database. So Hibernate is just a layer of extraction of top of JDBC
 
 To start with Hibernate u need:
 - Java IDE
 - Database server
 - Hibernate JAR files and JDBC driver
 
 To test ur JDBC is working properly. simply create a class
 give a string about the connect url  to your database
 ex: "jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&serverTimezone=UTC"
 then use Connection class = DriverManager.getConnection( url,id,pass) to connect
 
 
 Hibernate - Development Process:
 - Add Hibernate config file
 - Annotate java class
 - Develop java code to perform database operation
 
 Hibernate config file gonna consist of database url, id and pass and other small extra stuff 
 to connect to the database.
 
 Entity class is a fancy name for a java class which is mapped to a database table.
 Basically a java class with getter/setter and annotate to map with the database 
 There are 2 options for Mapping
 1. XML config file (legacy,old).
 2. Java annotation (modern, preferred). 
 In this demo we only focus on the modern (java anno)
 To map with java anno, we need:
 - Step 1: map class to database table
 - Step 2: map fields to database column
 
 
 //CREATE OBJECT
 Two Key player in Hibernate Class
 1st is SessionFactory which read hibernate config file, connection to database and create a 
 session object. You only need to create once in your app and reuse it over again and again
 
 2nd is Session: a wrapper around JDBC connection, main object for saving/retrieving objects
 short lived and it's retrieved from SessionFactory 
 
 basically create a sessionFactory by using 
 new Configuration.configure("hibernate_config_file").addAnnotatedClass("class_save".class).buildSessionFactory()
 then get the session with sessionfactory.getcurrentSession()
 if you want to save or retrieve from database use the session and doing the transaction
 session.beginTrans
 session.save
 session.getTransaction().commit(); to commit the transaction and so on
 after finish close the session.close().
 
 In hibernate you can specify which primary key column as a generation strategy
 (Because we wont put the id by yourself but want it automatically according to your database)
 The Anno is @GeneratedValue(strategy=GenerationType.IDENTITY)
 There are different generation like 
 .AUTO let it pick most appropriate strategy for this database
 .IDENTITY using database identity column
 .SEQUENCE primary key using database sequence
 .TABLE primary key using an underlying database table to ensure uniqueness
 
 You can also make a custome generator. To do this you need
 - Create implementation: org.hibernate.id.IdentifierGenerator
 - Override the method: public Serilizable generate(...) with you business logic
 Warning!!!!! You need to ensure your generator always create a unique value. 
 Should work with high-volume and multi-thread enviroment
 Should also work in a clustered enviroment incase you are using it in server clusters..
 
 If you want to change the auto increment value you can alter it through MySQL
 run this code in query
 ALTER TABLE database_name.table_name AUTO_INCREMENT = value you want to change
 Incase you want to reset the counter, you can delete all the row and reset the counter
 you can do this by
 truncate database_name.table_name
 
 ///READ OBJECT
 Retrieve object with Hibernate
 basically create a session then use
 session.get(class_name.class, primary_key_identifier) 
 This is for simple read object. If you want to read a list you can do it by create a query like
 session.createQuery("from Java_class_name").getResultList()
 if you want to be more specific with the query. You can add in, 
 "from Student s where s.lastName = 'Doe' OR s.firstName='Kevin'")
 '%....' % indicate searching anything that has end with .... after %
 lastName is java property name which u write in your own class, not the SQL column name
 
 //UPDATE OBJECT
 basic you need to retrieve a an object according to primary_key_identifier
 then set the value you want to update with setter/getter method of your class
 this is only work for single object update
 if you want to update all then you can simply create a query 
 Exp: session.createQuery("update Student set email ='not_email@gmail.com'").executeUpdate()
 similar to read object, you can add where, OR and other searching parameter to only update specific object
 
 //DELETE OBJECT 
 you retreieve the object 
 then delete the object from the session and then commit transaction
 another way is createQuery("delete from Student where id=2").executeUpdate() for example
 
 !!!!!!!!!!OBS!!!!!!!!!!!!! 
 If you alter you database (adding column, remove column bla bla and so on)
 You need to update ur table in MYSQL 
 Ex code: 
 ALTER TABLE `hb_student_tracker`.`student` 
ADD COLUMN `date_of_birth` DATETIME NULL AFTER `last_name`;
 and update your class, and application and so on......
 
 
 For Advance Mapping, usually in a database you will have multiple table and 
 there are relationship between tables. So we need to model this with hibernate such as
 One-to-one
 One-to-many
 many-to-one
 many-to-many 
 4 simple relationship concept of database
 ex for one-to-one like an instructor can have an instructor detail
 ex for one-to-many : an instructor can have many courses
 ex for many-to-many: a course can have many students and a student can have many courses
 
 Reminder about database concept such as
 - primary key: identify a unique row in a table
 - foreign key: a field in one table that refer to a primary key of another table (link table together)
 - cascade operation mean that u can apply same operation on related entities 
 ex: u have instrutor table link with instructor detail, if i save an instructor then it will also 
 save the instructor detail. This also apply for delete. in MySql is CASCADE DELETE. 
 OBS!!!! Depend on ur mapping relationship, u will use cascade delete when you need to..
 
 Fetch type: how to retrieve data
 - Eager: get everything
 - Lazy: get on request 
 
 Uni Directional: basically a one way relationship, through instructor u can get instructor detail
 Bi-Directional: a two-way-relationship, u can get instructor detail through an instructor and even the opposite
 
 To coding for One-to-one development process:
 -Define database table
 -Create InstructorDetail
 -Create Instructor class
 -Create Main App to run
 
  When ref a foreign key, it should be valid data to references another primary key of another table
  else it would destroy the relationship
  
  To understand more about cascade type, we need to know about Entity Life cycle
  - Detach: if entity is detached, it isnt associate with hibernate session
  - Merge: if entity is detached from a session, the merge will reattach it
  - Persist: transition new instance will manage state, next flush/commit will save in db
  - remove: transition managed entity to be removed. Next flush/commit will delete from db
  - refresh: reload/synch object with data from db. Prevents stale data.
  
  Cascate type:
  - PERSIST: if entity is persisted/save, related entity will also be persisted.
  - REMOVE: if entity is removed/deleted, related entity will also be removed.
  - REFRESH: same as above but with refreshed....
  - DETACH:...
  - MERGE:...
  - ALL: all above cascate type
  
  Config cascade type in java:
  @OneToOne(cascade=CascadeType.ALL)
  by default, no operation is cascade
  config multiple cascade type
  cascade={CascadeType.DETACH,CascadeType.PERSIST,....}
  
  
 
 
  

 
 
 
 
 
 
 