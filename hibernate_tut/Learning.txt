 ////////////////////HIBERNATE/////////////////////
 Hibernate is a framework for persisting/saving Java object in database
 The benefit of hibernate is:
 - handles all of low-level SQL
 - Minimize the JDBC code need to develop 
 - it also provides Object-to-Relational Mapping (ORM)
 basically the developer need to define mapping between java class and database table
 
 - To save object with hibernate, we use a special hibernate object, hibernate will store data in the database.
 This allow u to skip writing the SQL code for inserting the data in database.
 - To retrieve a given object, just give an id to hibernate, it will query the table according to the given id.
 - To retrieve all java object instead of 1, basically u need to fetch a query from hibernate object from the
 given java class object, then use query.list() to fetch for full dataobject.
 - Hibernate CRUD Apps: Create/Read/Update/Delete objects
 
 Relationship between Hibernate n JDBC:
 - Hibernate use JDBC to communicate with the database. So Hibernate is just a layer of extraction of top of JDBC
 
 To start with Hibernate u need:
 - Java IDE
 - Database server
 - Hibernate JAR files and JDBC driver
 
 To test ur JDBC is working properly. simply create a class
 give a string about the connect url  to your database
 ex: "jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&serverTimezone=UTC"
 then use Connection class = DriverManager.getConnection( url,id,pass) to connect
 
 
 Hibernate - Development Process:
 - Add Hibernate config file
 - Annotate java class
 - Develop java code to perform database operation
 
 Hibernate config file gonna consist of database url, id and pass and other small extra stuff 
 to connect to the database.
 
 Entity class is a fancy name for a java class which is mapped to a database table.
 Basically a java class with getter/setter and annotate to map with the database 
 There are 2 options for Mapping
 1. XML config file (legacy,old).
 2. Java annotation (modern, preferred). 
 In this demo we only focus on the modern (java anno)
 To map with java anno, we need:
 - Step 1: map class to database table
 - Step 2: map fields to database column
 
 
 
 
 
 